{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FREYDER18/SYS/blob/main/PARCIALSyS__2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Instalaci√≥n de Librer√≠as"
      ],
      "metadata": {
        "id": "PprBiLDkPXbz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit -q"
      ],
      "metadata": {
        "id": "QeHgxGRgPWex"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit numpy scipy matplotlib yt-dlp pydub"
      ],
      "metadata": {
        "id": "aKxyiN_YU_Az",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dea8c526-7e8f-44e4-d23f-dda8fd1258e6"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.46.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: yt-dlp in /usr/local/lib/python3.11/dist-packages (2025.6.30)\n",
            "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.14.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.24.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.45.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.6.15)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.26.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Crear carpeta pages para trabajar Multiapp Streamlit"
      ],
      "metadata": {
        "id": "Z1dssh2XPxDp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir pages"
      ],
      "metadata": {
        "id": "q2jwsZGlP5CR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ad69331-a4c5-4402-b956-9044b723239c"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mkdir: cannot create directory ‚Äòpages‚Äô: File exists\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#P√°gina principal"
      ],
      "metadata": {
        "id": "k5GICrXTP9IY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile 0_üëã_Hello.py\n",
        "\n",
        "# ========================================================\n",
        "# üåü P√°gina de Inicio - Simulaci√≥n de Se√±ales y Sistemas\n",
        "# ========================================================\n",
        "# Esta p√°gina da la bienvenida al usuario y explica c√≥mo navegar el entorno Streamlit\n",
        "# Redise√±ada para una presentaci√≥n distinta, con nuevo esquema de colores y estructura\n",
        "\n",
        "import streamlit as st\n",
        "\n",
        "# -------------------------------\n",
        "# üåê Configuraci√≥n general\n",
        "# -------------------------------\n",
        "st.set_page_config(\n",
        "    page_title=\"Dashboard Interactivo - Se√±ales y Sistemas\",\n",
        "    page_icon=\"üß≠\"\n",
        ")\n",
        "\n",
        "# -------------------------------\n",
        "# üé® Estilos personalizados (CSS)\n",
        "# -------------------------------\n",
        "# Se redefine el fondo, tipograf√≠a y estilo general\n",
        "st.markdown(\"\"\"\n",
        "    <style>\n",
        "        /* Fondo tipo miel clara */\n",
        "        .stApp {\n",
        "            background-color: #FFF8E1;\n",
        "            color: #212121;\n",
        "        }\n",
        "\n",
        "        /* Estilo de t√≠tulos */\n",
        "        h1, h3 {\n",
        "            font-family: 'Verdana', sans-serif;\n",
        "        }\n",
        "\n",
        "        /* Estilo de texto general */\n",
        "        .markdown-text-container {\n",
        "            font-family: 'Georgia', serif;\n",
        "        }\n",
        "\n",
        "        /* Ocultar el footer de Streamlit */\n",
        "        footer {visibility: hidden;}\n",
        "    </style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# -------------------------------\n",
        "# üß≠ Layout principal con columnas\n",
        "# -------------------------------\n",
        "col_izq, col_centro, col_der = st.columns([1, 3, 1])\n",
        "\n",
        "with col_centro:\n",
        "    # T√≠tulo con estilo personalizado\n",
        "    st.markdown(\n",
        "        \"<h1 style='text-align: center; color: #5D4037;'>Simulador de Se√±ales y Sistemas</h1>\",\n",
        "        unsafe_allow_html=True\n",
        "    )\n",
        "\n",
        "    st.markdown(\"___\")\n",
        "\n",
        "    # Introducci√≥n general\n",
        "    st.markdown(\"\"\"\n",
        "    Bienvenido a esta plataforma interactiva.\n",
        "    Aqu√≠ podr√°s explorar visualmente distintos puntos del parcial, entender mejor los conceptos y experimentar en tiempo real.\n",
        "    \"\"\")\n",
        "\n",
        "    st.markdown(\"___\")\n",
        "\n",
        "    # Gu√≠a de navegaci√≥n\n",
        "    st.markdown(\"<h3 style='color: #6D4C41;'>üìò ¬øC√≥mo usar esta herramienta?</h3>\", unsafe_allow_html=True)\n",
        "\n",
        "    st.markdown(\"\"\"\n",
        "    Utiliza el men√∫ lateral izquierdo (üëà) para explorar cada parte del parcial.\n",
        "    \"\"\")\n",
        "\n",
        "    # Cr√©ditos del autor\n",
        "    st.markdown(\"<h3 style='color: #6D4C41;'>üßë Autor del proyecto:</h3>\", unsafe_allow_html=True)\n",
        "\n",
        "    st.markdown(\"**Nombre:** FREYDER GIRALDO\")\n",
        "\n",
        "# -------------------------------\n",
        "# üîç Mensaje en la barra lateral\n",
        "# -------------------------------\n",
        "st.sidebar.info(\"üî∞ Navega por las secciones disponibles desde el panel lateral.\")\n"
      ],
      "metadata": {
        "id": "t5AZjVA_P-J2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "148c1430-920b-4577-cb4b-ed79debddae7"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting 0_üëã_Hello.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**PREGUNTA 1**:"
      ],
      "metadata": {
        "id": "dPwf9hLWQOzl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile 1_Punto_1.py\n",
        "# ===============================================================\n",
        "# Simulador de Sistemas de Segundo Orden con Fondo Color Miel\n",
        "# ===============================================================\n",
        "# Este dashboard permite analizar la respuesta de sistemas f√≠sicos\n",
        "# (como masa-resorte-amortiguador) y su equivalente el√©ctrico (RLC).\n",
        "# Se implementa con Streamlit para visualizaci√≥n interactiva.\n",
        "# ===============================================================\n",
        "\n",
        "# ==========================\n",
        "# üì¶ Importaci√≥n de librer√≠as\n",
        "# ==========================\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "import scipy.signal as signal\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ============================================\n",
        "# üé® Aplicar fondo color miel claro con CSS\n",
        "# ============================================\n",
        "st.markdown(\"\"\"\n",
        "    <style>\n",
        "    body {\n",
        "        background-color: #FFF8DC;\n",
        "    }\n",
        "    .stApp {\n",
        "        background-color: #FFF8DC;\n",
        "    }\n",
        "    </style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# ---------------------------------------------\n",
        "# üß† Configuraci√≥n general de la p√°gina Streamlit\n",
        "# ---------------------------------------------\n",
        "st.set_page_config(\n",
        "    page_title=\"An√°lisis de Sistemas de 2do Orden\",\n",
        "    page_icon=\"üß†üî¨\",\n",
        "    layout=\"wide\",\n",
        ")\n",
        "\n",
        "# T√≠tulo principal\n",
        "st.markdown(\"<h1 style='color: #BA55D3;'> Dashboard de Simulaci√≥n para Sistemas de Segundo Orden</h1>\", unsafe_allow_html=True)\n",
        "st.write(\n",
        "    \"Este panel permite simular sistemas de segundo orden, como el modelo masa-resorte-amortiguador \"\n",
        "    \"y su circuito el√©ctrico an√°logo. \"\n",
        ")\n",
        "\n",
        "# =============================\n",
        "# ‚öôÔ∏è Barra lateral: Par√°metros\n",
        "# =============================\n",
        "st.sidebar.header(\"‚öôÔ∏è Par√°metros de Simulaci√≥n\")\n",
        "\n",
        "# 1. Selecci√≥n del tipo de respuesta\n",
        "response_type = st.sidebar.selectbox(\n",
        "    \"1. Seleccione el Tipo de Respuesta\",\n",
        "    (\n",
        "        \"Subamortiguada\",\n",
        "        \"Cr√≠ticamente Amortiguada\",\n",
        "        \"Sobreamortiguada\",\n",
        "        \"Inestable\",\n",
        "    ),\n",
        "    help=\"Define el comportamiento general del sistema.\",\n",
        ")\n",
        "\n",
        "# 2. Selecci√≥n del factor de amortiguamiento (Œ∂) seg√∫n tipo\n",
        "if response_type == \"Subamortiguada\":\n",
        "    zeta = st.sidebar.slider(\"Factor de Amortiguamiento (Œ∂)\", 0.01, 0.99, 0.4, 0.01)\n",
        "elif response_type == \"Cr√≠ticamente Amortiguada\":\n",
        "    zeta = 1.0\n",
        "    st.sidebar.info(\"Para amortiguamiento cr√≠tico, Œ∂ = 1.\")\n",
        "elif response_type == \"Sobreamortiguada\":\n",
        "    zeta = st.sidebar.slider(\"Factor de Amortiguamiento (Œ∂)\", 1.1, 5.0, 2.0, 0.1)\n",
        "else:  # Inestable\n",
        "    zeta = st.sidebar.slider(\"Factor de Amortiguamiento (Œ∂)\", -1.0, -0.01, -0.3, 0.01)\n",
        "\n",
        "# 3. Frecuencia natural œân\n",
        "omega_n = st.sidebar.slider(\n",
        "    \"Frecuencia Natural (œân) [rad/s]\", 1.0, 20.0, 6.0, 0.5,\n",
        "    help=\"Frecuencia a la que el sistema oscilar√≠a sin amortiguamiento.\"\n",
        ")\n",
        "\n",
        "# Info del parcial (solo presentaci√≥n, no afecta simulaci√≥n)\n",
        "st.sidebar.markdown(\"---\")\n",
        "st.sidebar.info(\n",
        "    \"**Fuente:** Parcial 2 SyS 2025-1\\n\\n\"\n",
        "    \"**Profesor:** Andr√©s Marino √Ålvarez Meza, Ph.D. \"\n",
        ")\n",
        "\n",
        "# =======================================================\n",
        "# üí° Simulaci√≥n: Funciones de transferencia y par√°metros\n",
        "# =======================================================\n",
        "\n",
        "# -----------------------------------------\n",
        "# Funci√≥n de transferencia en lazo abierto\n",
        "# -----------------------------------------\n",
        "num_ol = [omega_n ** 2]\n",
        "den_ol = [1, 2 * zeta * omega_n, omega_n ** 2]\n",
        "sys_ol = signal.TransferFunction(num_ol, den_ol)\n",
        "\n",
        "# -----------------------------------------\n",
        "# Funci√≥n de transferencia en lazo cerrado\n",
        "# -----------------------------------------\n",
        "num_cl = num_ol\n",
        "den_cl = [den_ol[0], den_ol[1], den_ol[2] + num_ol[0]]\n",
        "sys_cl = signal.TransferFunction(num_cl, den_cl)\n",
        "\n",
        "# -----------------------------------------\n",
        "# Estimaci√≥n de par√°metros f√≠sicos\n",
        "# -----------------------------------------\n",
        "\n",
        "# Mec√°nico (masa-resorte-amortiguador)\n",
        "m = 1.0\n",
        "c = 2 * zeta * omega_n * m\n",
        "k = omega_n ** 2 * m\n",
        "\n",
        "# El√©ctrico equivalente (RLC)\n",
        "C_elec = 1.0  # Fijo para obtener soluci√≥n √∫nica\n",
        "if zeta != 0 and omega_n != 0:\n",
        "    R_elec = 1 / (2 * zeta * omega_n * C_elec)\n",
        "    L_elec = 1 / ((omega_n ** 2) * C_elec)\n",
        "else:\n",
        "    R_elec, L_elec = float('inf'), float('inf')\n",
        "\n",
        "# -----------------------------------------\n",
        "# Par√°metros temporales (seg√∫n tipo de Œ∂)\n",
        "# -----------------------------------------\n",
        "ts, tp, mp, tr = None, None, None, None\n",
        "\n",
        "if 0 < zeta < 1:\n",
        "    # Subamortiguado\n",
        "    ts = 4 / (zeta * omega_n)\n",
        "    tp = np.pi / (omega_n * np.sqrt(1 - zeta ** 2))\n",
        "    mp = 100 * np.exp((-zeta * np.pi) / np.sqrt(1 - zeta ** 2))\n",
        "\n",
        "    t_step_calc, y_step_calc = signal.step(sys_cl)\n",
        "    try:\n",
        "        final_value = y_step_calc[-1]\n",
        "        tr_10 = t_step_calc[np.where(y_step_calc >= 0.1 * final_value)[0][0]]\n",
        "        tr_90 = t_step_calc[np.where(y_step_calc >= 0.9 * final_value)[0][0]]\n",
        "        tr = tr_90 - tr_10\n",
        "    except IndexError:\n",
        "        tr = \"No calculable\"\n",
        "\n",
        "elif zeta < 0:\n",
        "    # Inestable\n",
        "    ts = tr = mp = tp = \"No aplica (Inestable)\"\n",
        "\n",
        "else:\n",
        "    # Cr√≠tico o Sobreamortiguado\n",
        "    mp = 0.0\n",
        "    tp = \"No aplica\"\n",
        "    t_step_calc, y_step_calc = signal.step(sys_cl)\n",
        "    final_value = y_step_calc[-1]\n",
        "\n",
        "    if final_value > 1e-6:\n",
        "        try:\n",
        "            settling_indices = np.where(np.abs(y_step_calc - final_value) >= 0.02 * final_value)[0]\n",
        "            ts = t_step_calc[settling_indices[-1]] if settling_indices.size > 0 else 0.0\n",
        "\n",
        "            tr_10_idx = np.where(y_step_calc >= 0.1 * final_value)[0]\n",
        "            tr_90_idx = np.where(y_step_calc >= 0.9 * final_value)[0]\n",
        "            tr = t_step_calc[tr_90_idx[0]] - t_step_calc[tr_10_idx[0]] if tr_10_idx.size > 0 and tr_90_idx.size > 0 else \"No calculable\"\n",
        "        except Exception:\n",
        "            ts = tr = \"Error num√©rico\"\n",
        "    else:\n",
        "        ts = tr = \"N/A\"\n",
        "\n",
        "# ======================================\n",
        "# üìä Visualizaci√≥n: Par√°metros y gr√°ficos\n",
        "# ======================================\n",
        "col1, col2 = st.columns(2)\n",
        "\n",
        "# Mostrar sistemas mec√°nico y el√©ctrico\n",
        "with col1:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Componentes Estimados del Sistema</h3>\", unsafe_allow_html=True)\n",
        "    st.markdown(\"<h5 style='color: #BA55D3;'>Sistema Mec√°nico (m-k-c)</h5>\", unsafe_allow_html=True)\n",
        "    st.code(f\"Masa (m): {m:.2f} kg\\nConstante Resorte (k): {k:.2f} N/m\\nAmortiguamiento (c): {c:.2f} Ns/m\", language=\"text\")\n",
        "\n",
        "    st.markdown(\"<h5 style='color: #BA55D3;'>Sistema El√©ctrico (R-L-C)</h5>\", unsafe_allow_html=True)\n",
        "    st.code(f\"Resistencia (R): {R_elec:.2f} Œ©\\nInductancia (L): {L_elec:.2f} H\\nCapacitancia (C): {C_elec:.2f} F\", language=\"text\")\n",
        "\n",
        "# Mostrar par√°metros temporales\n",
        "with col2:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Par√°metros Temporales (Lazo Cerrado)</h3>\", unsafe_allow_html=True)\n",
        "    if 0 < zeta < 1:\n",
        "        st.code(\n",
        "            f\"Tiempo de levantamiento (Tr): {tr if isinstance(tr, str) else f'{tr:.3f} s'}\\n\"\n",
        "            f\"Sobreimpulso m√°ximo (Mp): {mp:.2f} %\\n\"\n",
        "            f\"Tiempo de pico (Tp): {tp:.3f} s\\n\"\n",
        "            f\"Tiempo de establecimiento (Ts): {ts:.3f} s\", language=\"text\")\n",
        "    elif zeta < 0:\n",
        "        st.warning(\"Para un sistema inestable, los par√°metros temporales no est√°n definidos.\")\n",
        "    else:\n",
        "        st.info(\"Para sistemas sobreamortiguados o cr√≠ticamente amortiguados, no hay sobreimpulso ni tiempo de pico.\")\n",
        "        st.code(\n",
        "            f\"Tiempo de establecimiento (Ts): {ts if isinstance(ts, str) else f'{ts:.3f} s'}\\n\"\n",
        "            f\"Tiempo de levantamiento (Tr): {tr if isinstance(tr, str) else f'{tr:.3f} s'}\", language=\"text\")\n",
        "\n",
        "# ===========================\n",
        "# üìà Gr√°ficos y pesta√±as\n",
        "# ===========================\n",
        "tab1, tab2, tab3, tab4, tab5 = st.tabs([\"Diagrama de Bode\", \"Polos y Ceros\", \"Respuesta al Impulso\", \"Respuesta al Escal√≥n\", \"Respuesta a la Rampa\"])\n",
        "\n",
        "# Funci√≥n de gr√°fico para polos y ceros\n",
        "def plot_poles_zeros(system, ax, title):\n",
        "    poles = system.poles\n",
        "    zeros = system.zeros\n",
        "    ax.scatter(np.real(poles), np.imag(poles), marker='x', color='r', s=100, label='Polos')\n",
        "    if zeros.size > 0:\n",
        "        ax.scatter(np.real(zeros), np.imag(zeros), marker='o', color='b', s=100, facecolors='none', label='Ceros')\n",
        "    ax.grid(True)\n",
        "    ax.set_xlabel(\"Eje Real\")\n",
        "    ax.set_ylabel(\"Eje Imaginario\")\n",
        "    ax.axhline(0, color='black', lw=0.5)\n",
        "    ax.axvline(0, color='black', lw=0.5)\n",
        "    ax.set_title(title)\n",
        "    ax.legend()\n",
        "\n",
        "# Diagrama de Bode\n",
        "with tab1:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Diagrama de Bode</h3>\", unsafe_allow_html=True)\n",
        "    fig, (ax_mag, ax_phase) = plt.subplots(2, 1, figsize=(10, 8))\n",
        "    w_ol, mag_ol, phase_ol = signal.bode(sys_ol)\n",
        "    w_cl, mag_cl, phase_cl = signal.bode(sys_cl)\n",
        "    ax_mag.semilogx(w_ol, mag_ol, label='Lazo Abierto')\n",
        "    ax_mag.semilogx(w_cl, mag_cl, label='Lazo Cerrado', linestyle='--')\n",
        "    ax_mag.set_ylabel(\"Magnitud (dB)\")\n",
        "    ax_mag.set_title(\"Respuesta en Magnitud\")\n",
        "    ax_mag.grid(True, which='both')\n",
        "    ax_mag.legend()\n",
        "    ax_phase.semilogx(w_ol, phase_ol, label='Lazo Abierto')\n",
        "    ax_phase.semilogx(w_cl, phase_cl, label='Lazo Cerrado', linestyle='--')\n",
        "    ax_phase.set_ylabel(\"Fase (grados)\")\n",
        "    ax_phase.set_xlabel(\"Frecuencia (rad/s)\")\n",
        "    ax_phase.set_title(\"Respuesta en Fase\")\n",
        "    ax_phase.grid(True, which='both')\n",
        "    ax_phase.legend()\n",
        "    plt.tight_layout()\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Polos y Ceros\n",
        "with tab2:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Diagrama de Polos y Ceros</h3>\", unsafe_allow_html=True)\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n",
        "    plot_poles_zeros(sys_ol, ax1, \"Lazo Abierto\")\n",
        "    plot_poles_zeros(sys_cl, ax2, \"Lazo Cerrado\")\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Respuesta al Impulso\n",
        "with tab3:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Respuesta al Impulso</h3>\", unsafe_allow_html=True)\n",
        "    t, y_ol = signal.impulse(sys_ol)\n",
        "    _, y_cl = signal.impulse(sys_cl, T=t)\n",
        "    fig, ax = plt.subplots(figsize=(10, 5))\n",
        "    ax.plot(t, y_ol, label='Lazo Abierto')\n",
        "    ax.plot(t, y_cl, label='Lazo Cerrado', linestyle='--')\n",
        "    ax.set_xlabel(\"Tiempo (s)\")\n",
        "    ax.set_ylabel(\"Amplitud\")\n",
        "    ax.set_title(\"Respuesta al Impulso del Sistema\")\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Respuesta al Escal√≥n\n",
        "with tab4:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Respuesta al Escal√≥n Unitario</h3>\", unsafe_allow_html=True)\n",
        "    t, y_ol = signal.step(sys_ol)\n",
        "    _, y_cl = signal.step(sys_cl, T=t)\n",
        "    fig, ax = plt.subplots(figsize=(10, 5))\n",
        "    ax.plot(t, y_ol, label='Lazo Abierto')\n",
        "    ax.plot(t, y_cl, label='Lazo Cerrado', linestyle='--')\n",
        "    ax.axhline(1, color='gray', linestyle=':', label='Referencia (Lazo Cerrado)')\n",
        "    ax.set_xlabel(\"Tiempo (s)\")\n",
        "    ax.set_ylabel(\"Amplitud\")\n",
        "    ax.set_title(\"Respuesta al Escal√≥n del Sistema\")\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Respuesta a la Rampa\n",
        "with tab5:\n",
        "    st.markdown(\"<h3 style='color: #BA55D3;'>Respuesta a la Rampa</h3>\", unsafe_allow_html=True)\n",
        "    sys_ol_ramp = signal.TransferFunction(sys_ol.num, np.polymul(sys_ol.den, [1, 0]))\n",
        "    sys_cl_ramp = signal.TransferFunction(sys_cl.num, np.polymul(sys_cl.den, [1, 0]))\n",
        "    t, y_ol = signal.step(sys_ol_ramp)\n",
        "    _, y_cl = signal.step(sys_cl_ramp, T=t)\n",
        "    fig, ax = plt.subplots(figsize=(10, 5))\n",
        "    ax.plot(t, t, 'k:', label='Entrada Rampa')\n",
        "    ax.plot(t, y_ol, label='Respuesta Lazo Abierto')\n",
        "    ax.plot(t, y_cl, label='Respuesta Lazo Cerrado', linestyle='--')\n",
        "    ax.set_xlabel(\"Tiempo (s)\")\n",
        "    ax.set_ylabel(\"Amplitud\")\n",
        "    ax.set_title(\"Respuesta a la Rampa del Sistema\")\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "    st.pyplot(fig)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KjobECQg6KDq",
        "outputId": "1f3efbc6-4431-4963-99d3-ac94e61e6c39"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing 1_Punto_1.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mv 1_Punto_1.py pages/"
      ],
      "metadata": {
        "id": "D_WSDLbSQifm"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**PREGUNTA 2**:"
      ],
      "metadata": {
        "id": "LcoHtp6WQqnY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Consulte y presente el modelo matem√°tico del proceso de modulaci√≥n y demodulaci√≥n por amplitud en banda lateral √∫nica (SSB-AM), tanto en el dominio del tiempo como en el dominio de la frecuencia (mediante la transformada de Fourier).\n",
        "\n",
        "A partir de este modelo, construya un dashboard interactivo sobre Streamlit que permita al usuario visualizar y comprender el proceso de modulaci√≥n y demodulaci√≥n SSB-AM. Para ello, utilice como se√±al mensaje: i) una se√±al pulso rectangular, ii) un segmento de 5 segundos de una canci√≥n.\n",
        "\n",
        "Implemente los filtros requeridos en el sistema SSB-AM utilizando filtros digitales recursivos (IIR), y visualice su comportamiento mediante el diagrama de Bode y el plano de polos y ceros. El dashboard debe describir de forma concreta y clara, cada una de las etapas del proceso, presentando gr√°ficas relevantes de las se√±ales obtenidas en etapas intermedias en el tiempo y la frecuencia."
      ],
      "metadata": {
        "id": "u4Voyte27rob"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**RESPUESTA:**"
      ],
      "metadata": {
        "id": "vbXuMZxK7-BU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile 2_Punto_2.py\n",
        "\n",
        "# ===================================================\n",
        "# üì¶ Importaci√≥n de bibliotecas necesarias\n",
        "# ===================================================\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "from scipy.fft import fft, ifft, fftshift, ifftshift, fftfreq\n",
        "from scipy.io import wavfile\n",
        "import matplotlib.pyplot as plt\n",
        "import yt_dlp\n",
        "import os\n",
        "import subprocess\n",
        "\n",
        "# ===================================================\n",
        "# üé® Estilo personalizado (fondo miel y texto oscuro)\n",
        "# ===================================================\n",
        "st.markdown(\"\"\"\n",
        "    <style>\n",
        "        .stApp {\n",
        "            background-color: #FFF3CD; /* Fondo miel claro */\n",
        "            color: #1C1C1C;\n",
        "        }\n",
        "        h1, h2, h3 {\n",
        "            color: #8B4513; /* Marr√≥n fuerte para t√≠tulos */\n",
        "            font-family: 'Segoe UI', sans-serif;\n",
        "        }\n",
        "        .markdown-text-container {\n",
        "            font-family: 'Georgia', serif;\n",
        "        }\n",
        "        footer {visibility: hidden;}\n",
        "    </style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# ===================================================\n",
        "# ‚öôÔ∏è Configuraci√≥n de la aplicaci√≥n Streamlit\n",
        "# ===================================================\n",
        "st.set_page_config(\n",
        "    page_title=\"Modulador SSB-AM por FFT\",\n",
        "    page_icon=\"üéôÔ∏è\",\n",
        "    layout=\"wide\"\n",
        ")\n",
        "\n",
        "# T√≠tulo y descripci√≥n\n",
        "st.markdown(\"<h1>üéôÔ∏è An√°lisis de Modulaci√≥n SSB-AM (FFT)</h1>\", unsafe_allow_html=True)\n",
        "st.write(\n",
        "    \"Simulador interactivo de modulaci√≥n y demodulaci√≥n SSB usando filtrado en frecuencia. \"\n",
        "    \"Ideal para visualizar espectros y se√±ales en tiempo real desde una se√±al generada o desde YouTube.\"\n",
        ")\n",
        "\n",
        "st.info(\"‚ö†Ô∏è Se requiere `yt-dlp` y `ffmpeg` instalados para usar audio de YouTube.\", icon=\"üîß\")\n",
        "\n",
        "# ===================================================\n",
        "# üîä Funci√≥n para cargar y recortar audio desde YouTube\n",
        "# ===================================================\n",
        "@st.cache_data\n",
        "def load_audio_from_youtube(url, duration_s=5, start_s=0):\n",
        "    temp_wav = \"temp_audio.wav\"\n",
        "    crop_wav = \"cropped_audio.wav\"\n",
        "    try:\n",
        "        # Borrar archivos antiguos si existen\n",
        "        for f in [temp_wav, crop_wav]:\n",
        "            if os.path.exists(f): os.remove(f)\n",
        "\n",
        "        # Par√°metros de descarga\n",
        "        ydl_opts = {\n",
        "            'format': 'bestaudio/best',\n",
        "            'postprocessors': [{'key': 'FFmpegExtractAudio', 'preferredcodec': 'wav'}],\n",
        "            'outtmpl': 'temp_audio',\n",
        "            'quiet': True,\n",
        "        }\n",
        "\n",
        "        # Descargar con yt-dlp\n",
        "        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n",
        "            ydl.download([url])\n",
        "\n",
        "        # Recortar usando ffmpeg\n",
        "        command = [\n",
        "            'ffmpeg', '-i', temp_wav, '-ss', str(start_s), '-t', str(duration_s),\n",
        "            '-acodec', 'pcm_s16le', '-ar', '44100', '-ac', '1', crop_wav, '-y'\n",
        "        ]\n",
        "        subprocess.run(command, check=True, capture_output=True)\n",
        "\n",
        "        # Leer el archivo recortado\n",
        "        fs, data = wavfile.read(crop_wav)\n",
        "        if data.ndim > 1:\n",
        "            data = data.mean(axis=1)  # Convertir a mono\n",
        "        data = data / np.max(np.abs(data))  # Normalizar\n",
        "        t = np.linspace(start_s, start_s + len(data) / fs, len(data), endpoint=False)\n",
        "\n",
        "        # Limpieza\n",
        "        for f in [temp_wav, crop_wav]:\n",
        "            if os.path.exists(f): os.remove(f)\n",
        "\n",
        "        return data, fs, t\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error: {e}\")\n",
        "        return None, None, None\n",
        "\n",
        "# ===================================================\n",
        "# üìà Funciones para graficar se√±ales\n",
        "# ===================================================\n",
        "def plot_signal_time(t, sig, title):\n",
        "    fig, ax = plt.subplots(figsize=(10, 4))\n",
        "    ax.plot(t, sig, lw=1, color=\"#8B0000\")\n",
        "    ax.set_title(title)\n",
        "    ax.set_xlabel(\"Tiempo (s)\")\n",
        "    ax.set_ylabel(\"Amplitud\")\n",
        "    ax.grid(True)\n",
        "    plt.tight_layout()\n",
        "    return fig\n",
        "\n",
        "def plot_signal_freq(sig, fs, title, xlim_freq=None):\n",
        "    fig, ax = plt.subplots(figsize=(10, 4))\n",
        "    N = len(sig)\n",
        "    if N == 0: return fig\n",
        "    yf = fftshift(fft(sig))\n",
        "    xf = fftshift(fftfreq(N, 1 / fs))\n",
        "    ax.plot(xf, np.abs(yf) / N, lw=1, color=\"#DAA520\")\n",
        "    ax.set_title(title)\n",
        "    ax.set_xlabel(\"Frecuencia (Hz)\")\n",
        "    ax.set_ylabel(\"Magnitud\")\n",
        "    ax.grid(True)\n",
        "    if xlim_freq:\n",
        "        ax.set_xlim(xlim_freq)\n",
        "    plt.tight_layout()\n",
        "    return fig\n",
        "\n",
        "# ===================================================\n",
        "# üß† Funciones de modulaci√≥n y demodulaci√≥n SSB\n",
        "# ===================================================\n",
        "def modulate_ssb_fft(m_t, t, fs, fc, sideband_type):\n",
        "    s_dsb = m_t * (2 * np.cos(2 * np.pi * fc * t))\n",
        "    S_dsb = fftshift(fft(s_dsb))\n",
        "    freqs = fftshift(fftfreq(len(t), 1 / fs))\n",
        "    mask = np.where(freqs > fc, 1, 0) if sideband_type == 'USB (Superior)' else np.where(freqs < -fc, 1, 0)\n",
        "    S_ssb = S_dsb * mask\n",
        "    return np.real(ifft(ifftshift(S_ssb)))\n",
        "\n",
        "def demodulate_ssb_fft(s_ssb, t, fs, fc, message_bw):\n",
        "    v_t = s_ssb * (2 * np.cos(2 * np.pi * fc * t))\n",
        "    V_f = fftshift(fft(v_t))\n",
        "    freqs = fftshift(fftfreq(len(t), 1 / fs))\n",
        "    mask = np.where(np.abs(freqs) <= message_bw * 1.2, 1, 0)\n",
        "    M_demod = V_f * mask\n",
        "    return np.real(ifft(ifftshift(M_demod)))\n",
        "\n",
        "# ===================================================\n",
        "# üéõÔ∏è Controles de simulaci√≥n en la barra lateral\n",
        "# ===================================================\n",
        "st.sidebar.header(\"üéõÔ∏è Configuraci√≥n\")\n",
        "\n",
        "msg_type = st.sidebar.selectbox(\"Tipo de Se√±al\", (\"Pulso Rectangular\", \"Audio de YouTube\"))\n",
        "duration_s = st.sidebar.slider(\"Duraci√≥n (s)\", 1, 20, 5)\n",
        "fs, m_t, t, message_bw = 44100, None, None, 0\n",
        "\n",
        "if msg_type == \"Pulso Rectangular\":\n",
        "    t = np.linspace(0, duration_s, int(duration_s * fs), endpoint=False)\n",
        "    width = st.sidebar.slider(\"Ancho Pulso (s)\", 0.1, 2.0, 0.5, 0.1)\n",
        "    m_t = np.zeros_like(t)\n",
        "    m_t[t < width] = 1.0\n",
        "    message_bw = 4 / width\n",
        "    st.sidebar.info(f\"BW estimada: {message_bw:.1f} Hz\")\n",
        "elif msg_type == \"Audio de YouTube\":\n",
        "    url = st.sidebar.text_input(\"URL de YouTube\", \"https://www.youtube.com/watch?v=OXq-JP8w5H4\")\n",
        "    start_time = st.sidebar.slider(\"Inicio (s)\", 0, 300, 50)\n",
        "    if url:\n",
        "        with st.spinner(\"Procesando audio...\"):\n",
        "            m_t, fs, t = load_audio_from_youtube(url, duration_s, start_time)\n",
        "        message_bw = 20000\n",
        "        st.sidebar.info(f\"BW estimada: {message_bw} Hz\")\n",
        "\n",
        "fc_max = max((fs / 2) - message_bw, 1000)\n",
        "fc = st.sidebar.slider(\"Frecuencia Portadora (Hz)\", 1000.0, fc_max, 10000.0, 500.0)\n",
        "sideband_type = st.sidebar.radio(\"Banda Lateral\", (\"USB (Superior)\", \"LSB (Inferior)\"))\n",
        "\n",
        "# ===================================================\n",
        "# ‚ñ∂Ô∏è Simulaci√≥n completa\n",
        "# ===================================================\n",
        "if m_t is not None and t is not None:\n",
        "    st.markdown(\"---\")\n",
        "    st.header(\"1Ô∏è‚É£ Se√±al Mensaje\")\n",
        "    col1, col2 = st.columns(2)\n",
        "    with col1:\n",
        "        st.pyplot(plot_signal_time(t, m_t, \"Mensaje en el Tiempo\"))\n",
        "    with col2:\n",
        "        st.pyplot(plot_signal_freq(m_t, fs, \"Mensaje en Frecuencia\", (-message_bw * 1.5, message_bw * 1.5)))\n",
        "    if msg_type == \"Audio de YouTube\":\n",
        "        st.audio(m_t, format=\"audio/wav\", sample_rate=fs)\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.header(\"2Ô∏è‚É£ Modulaci√≥n SSB\")\n",
        "    s_ssb = modulate_ssb_fft(m_t, t, fs, fc, sideband_type)\n",
        "    st.pyplot(plot_signal_freq(s_ssb, fs, f\"Espectro de SSB - {sideband_type}\", (fc - message_bw * 1.5, fc + message_bw * 1.5)))\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.header(\"3Ô∏è‚É£ Demodulaci√≥n SSB\")\n",
        "    m_demod = demodulate_ssb_fft(s_ssb, t, fs, fc, message_bw)\n",
        "    col1, col2 = st.columns(2)\n",
        "    with col1:\n",
        "        st.pyplot(plot_signal_time(t, m_demod, \"Mensaje Recuperado en el Tiempo\"))\n",
        "    with col2:\n",
        "        st.pyplot(plot_signal_freq(m_demod, fs, \"Mensaje Recuperado en Frecuencia\", (-message_bw * 1.5, message_bw * 1.5)))\n",
        "    if msg_type == \"Audio de YouTube\":\n",
        "        st.audio(m_demod, format=\"audio/wav\", sample_rate=fs)\n",
        "else:\n",
        "    st.warning(\"üîç Configura la se√±al en la barra lateral para comenzar la simulaci√≥n.\")\n"
      ],
      "metadata": {
        "id": "QrUbUTnEQr5w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1258c05e-0177-44a4-de09-4c57104b4ddf"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing 2_Punto_2.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mv 2_Punto_2.py pages/"
      ],
      "metadata": {
        "id": "5f_sKNnTQ2CW"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Inicializaci√≥n del Dashboard a partir de t√∫nel local**\n",
        "1. **Reemplazar nombre de archivo:** Reemplaza el nombre del archivo como se indica en el comentario de la linea 6 de la celda de codigo\n",
        "\n",
        "2. **Accede al enlace provisional:** Una vez que la aplicaci√≥n est√© corriendo, LocalTunnel generar√° un enlace temporal. Haz clic o copia ese enlace para acceder a tu aplicaci√≥n en el navegador (cada vez que corras la celda, el link podr√° ser diferente).\n",
        "\n",
        "**Nota:** Para finalizar la ejecuci√≥n del Dashboard ejecuta la ultima celda de codigo y sigue las instrucciones."
      ],
      "metadata": {
        "id": "p6c79k4nQ9Se"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\n",
        "!chmod +x cloudflared-linux-amd64\n",
        "!mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\n",
        "\n",
        "#Ejecutar Streamlit\n",
        "!streamlit run 0_üëã_Hello.py &>/content/logs.txt & #Cambiar 0_üëã_Hello.py por el nombre de tu archivo principal\n",
        "\n",
        "#Exponer el puerto 8501 con Cloudflare Tunnel\n",
        "!cloudflared tunnel --url http://localhost:8501 > /content/cloudflared.log 2>&1 &\n",
        "\n",
        "#Leer la URL p√∫blica generada por Cloudflare\n",
        "import time\n",
        "time.sleep(5)  # Esperar que se genere la URL\n",
        "\n",
        "import re\n",
        "found_context = False  # Indicador para saber si estamos en la secci√≥n correcta\n",
        "\n",
        "with open('/content/cloudflared.log') as f:\n",
        "    for line in f:\n",
        "        #Detecta el inicio del contexto que nos interesa\n",
        "        if \"Your quick Tunnel has been created\" in line:\n",
        "            found_context = True\n",
        "\n",
        "        #Busca una URL si ya se encontr√≥ el contexto relevante\n",
        "        if found_context:\n",
        "            match = re.search(r'https?://\\S+', line)\n",
        "            if match:\n",
        "                url = match.group(0)  #Extrae la URL encontrada\n",
        "                print(f'Tu aplicaci√≥n est√° disponible en: {url}')\n",
        "                break  #Termina el bucle despu√©s de encontrar la URL"
      ],
      "metadata": {
        "id": "ksa4PloyRPjF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6cd56617-bab7-47ed-eebf-fe0f75366461"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-07-09 07:05:44--  https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\n",
            "Resolving github.com (github.com)... 140.82.112.4\n",
            "Connecting to github.com (github.com)|140.82.112.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github.com/cloudflare/cloudflared/releases/download/2025.7.0/cloudflared-linux-amd64 [following]\n",
            "--2025-07-09 07:05:44--  https://github.com/cloudflare/cloudflared/releases/download/2025.7.0/cloudflared-linux-amd64\n",
            "Reusing existing connection to github.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/106867604/37d2bad8-a2ed-4b93-8139-cbb15162d81d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20250709%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250709T070342Z&X-Amz-Expires=1800&X-Amz-Signature=c1487a2be69713f65e9c72c7d9ffe80f1f2eb9a77415b69da7e81daa53b5c221&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3Dcloudflared-linux-amd64&response-content-type=application%2Foctet-stream [following]\n",
            "--2025-07-09 07:05:44--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/106867604/37d2bad8-a2ed-4b93-8139-cbb15162d81d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20250709%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250709T070342Z&X-Amz-Expires=1800&X-Amz-Signature=c1487a2be69713f65e9c72c7d9ffe80f1f2eb9a77415b69da7e81daa53b5c221&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3Dcloudflared-linux-amd64&response-content-type=application%2Foctet-stream\n",
            "Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 41168761 (39M) [application/octet-stream]\n",
            "Saving to: ‚Äòcloudflared-linux-amd64‚Äô\n",
            "\n",
            "cloudflared-linux-a 100%[===================>]  39.26M   169MB/s    in 0.2s    \n",
            "\n",
            "2025-07-09 07:05:44 (169 MB/s) - ‚Äòcloudflared-linux-amd64‚Äô saved [41168761/41168761]\n",
            "\n",
            "Tu aplicaci√≥n est√° disponible en: https://diving-fascinating-cds-series.trycloudflare.com\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Finalizaci√≥n de ejecuci√≥n del Dashboard**"
      ],
      "metadata": {
        "id": "EeIbzI5BRUcS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "res = input(\"Digite (1) para finalizar la ejecuci√≥n del Dashboard: \")\n",
        "\n",
        "if res.upper() == \"1\":\n",
        "    os.system(\"pkill streamlit\")  # Termina el proceso de Streamlit\n",
        "    print(\"El proceso de Streamlit ha sido finalizado.\")"
      ],
      "metadata": {
        "id": "QT5IZWWPRbJV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}